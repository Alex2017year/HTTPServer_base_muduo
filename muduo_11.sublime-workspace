{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"static",
				"static_cast"
			],
			[
				"as",
				"as_string"
			],
			[
				"Sock",
				"SocketsOps.h	(Connector.cc)"
			],
			[
				"listen",
				"listenning"
			],
			[
				"name",
				"namespace"
			],
			[
				"Evn",
				"EventLoopThreadPool"
			],
			[
				"comm",
				"comm-todo	Comment - To-do list"
			],
			[
				"queue",
				"queueInloop"
			],
			[
				"write",
				"writeCompleteCallback_"
			],
			[
				"share",
				"shared_from_this"
			],
			[
				"Time",
				"Timestamp.h	(Poller.h)"
			],
			[
				"LOG",
				"LOG_DEBUG"
			],
			[
				"So",
				"SocketsOps.h	(Socket.cc)"
			],
			[
				"conne",
				"connectEstablished"
			],
			[
				"remove",
				"removeConnection"
			],
			[
				"clos",
				"closeCallback_	(Channel.h)"
			],
			[
				"clo",
				"closeCallback_"
			],
			[
				"LOg",
				"LOG_INFO	(Socket.cc)"
			],
			[
				"Socket",
				"Socket.h	(Acceptor.h)"
			],
			[
				"sock",
				"socket_"
			],
			[
				"Tcp",
				"TcpConnection"
			],
			[
				"mem",
				"memory	(TimerQueue.h)"
			],
			[
				"oper",
				"operator	(Channel.h)"
			],
			[
				"Socke",
				"Socket"
			],
			[
				"S",
				"Socket	(Acceptor.h)"
			],
			[
				"func",
				"functional	(Channel.h)"
			],
			[
				"close",
				"close-on-exec"
			],
			[
				"sta",
				"static_assert"
			],
			[
				"copa",
				"copyable.h	(TimerId.h)"
			],
			[
				"non",
				"noncopyable.h	(Channel.h)"
			],
			[
				"Ev",
				"EventLoop.h	(Poller.h)"
			],
			[
				"Eve",
				"EventLoopThread	(EventLoopThread.h)"
			],
			[
				"Mute",
				"MutexLock	(EventLoop.h)"
			],
			[
				"exi",
				"existing	(Poller.cc)"
			],
			[
				"pri",
				"private	(TimerId.h)"
			],
			[
				"Even",
				"EventLoopThread"
			],
			[
				"noncopy",
				"noncopyable.h"
			],
			[
				"addTimer",
				"addTimerInLoop"
			],
			[
				"Timer",
				"TimerQueue"
			],
			[
				"ass",
				"assertInLoopThread"
			],
			[
				"wake",
				"wakeupChannel_"
			],
			[
				"muduo",
				"muduo::Logger::setLogLevel	(test04.cc)"
			],
			[
				"create",
				"createEventfd"
			],
			[
				"tim",
				"timers_"
			],
			[
				"timer",
				"timers_"
			],
			[
				"TimerL",
				"TimerList"
			],
			[
				"sha",
				"shared_ptr"
			],
			[
				"Tim",
				"Timer"
			],
			[
				"shar",
				"shared_ptr	(TimerId.h)"
			],
			[
				"expi",
				"expired	(TimerQueue.h)"
			],
			[
				"TimerLi",
				"TimerList::iterator"
			],
			[
				"timers",
				"timers_	(TimerQueue.h)"
			],
			[
				"loo",
				"loop_	(TimerQueue.h)"
			],
			[
				"k",
				"kMicroSecondsPerSecond	(Timestamp.h)"
			],
			[
				"Tm",
				"TMP_MAX	TMP_MAX"
			],
			[
				"Ti",
				"TimerQueue	TimerQueue"
			],
			[
				"int",
				"interval_	(Timer.h)"
			],
			[
				"re",
				"repeat_"
			],
			[
				"exo",
				"expiration_"
			],
			[
				"inter",
				"interval"
			],
			[
				"in",
				"inc	#include <…>"
			],
			[
				"na",
				"namespace	namespace name=namespace"
			],
			[
				"update",
				"updateChannel	(EventLoop.cc)"
			],
			[
				"loop",
				"loop_"
			],
			[
				"it",
				"it_value	struct timespec it_value"
			],
			[
				"ena",
				"enableReading	(Channel.h)"
			],
			[
				"TFD",
				"TFD_CLOEXEC	TFD_CLOEXEC"
			],
			[
				"timerfd",
				"timerfd_create	int timerfd_create(clockid_t __clock_id, int __flags)"
			],
			[
				"Cha",
				"Channel.h	(Channel.cc)"
			],
			[
				"C",
				"Channel.h	(Channel.cc)"
			],
			[
				"Poller",
				"Poller.h	(Poller.cc)"
			],
			[
				"nam",
				"name	Namespace"
			],
			[
				"poll",
				"poller_"
			],
			[
				"owner",
				"ownerLoop_	(Poller.h)"
			],
			[
				"ow",
				"ownerLoop_"
			],
			[
				"assert",
				"assertInLoopThread	(EventLoop.cc)"
			],
			[
				"ase",
				"assert.h	(EventLoop.cc)"
			],
			[
				"rev",
				"revents_"
			],
			[
				"read",
				"readCallback_"
			],
			[
				"jo",
				"join	(Thread.h)"
			],
			[
				"thre",
				"threadFunc"
			],
			[
				"get",
				"getEventLoopOfCurrentThread	(EventLoop.h)"
			],
			[
				"LOG_",
				"LOG_TRACE	(Logging_test.cc)"
			],
			[
				"E",
				"EventLoop	(EventLoop.h)"
			],
			[
				"i",
				"ifnd	ifndef (…)"
			],
			[
				"Logg",
				"Logging_test"
			],
			[
				"point",
				"pointer"
			],
			[
				"__",
				"__p"
			],
			[
				"__p",
				"__ptr"
			],
			[
				"type",
				"typedef	(test.cpp)"
			],
			[
				"publi",
				"public	(test.cpp)"
			],
			[
				"err",
				"errno"
			],
			[
				"Epoll",
				"Epoll_wait"
			],
			[
				"sig",
				"sigmask"
			],
			[
				"parse",
				"parse_request"
			],
			[
				"b",
				"buf"
			],
			[
				"is_",
				"is_static	(do_task.c)"
			],
			[
				"str",
				"strcmp"
			],
			[
				"MAX",
				"MAXLINE	(do_task.c)"
			],
			[
				"con",
				"continue	(tiny_epoll_nonblock.c)"
			],
			[
				"MAx",
				"MAXBUF	(csapp.h)"
			],
			[
				"reque",
				"request_b"
			],
			[
				"ev",
				"event"
			],
			[
				"request_",
				"request_init"
			],
			[
				"make",
				"make_socket_non_blocking"
			],
			[
				"requ",
				"request_b"
			],
			[
				"call",
				"calloc	(csapp.c)"
			],
			[
				"eve",
				"events"
			],
			[
				"do",
				"do_task_nonblock.h	(do_task_nonblock.c)"
			],
			[
				"ex",
				"extern	(csapp.h)"
			],
			[
				"cs",
				"csapp.h	(csapp.c)"
			],
			[
				"uni",
				"unix_error	(do_task.c)"
			],
			[
				"epoll",
				"epoll_wait	(epoll_sample.c)"
			],
			[
				"Epoll_",
				"Epoll_ctl"
			],
			[
				"Epo",
				"epoll_ctl"
			],
			[
				"com",
				"comm-subsection	Comment - Subsection comment"
			],
			[
				"unix",
				"unix_error"
			],
			[
				"app",
				"app_error"
			],
			[
				"F",
				"F_GETFL	(epoll_sample.c)"
			],
			[
				"auto",
				"autocomplete	(CTags.sublime-settings)"
			],
			[
				"Pthread_m",
				"Pthread_mutex_unlock	(fdbuf_mutex.c)"
			],
			[
				"fr",
				"fprintf	fprintf …"
			],
			[
				"Pthread",
				"Pthread_mutex_unlock"
			],
			[
				"nre",
				"nready_mutex"
			],
			[
				"fbuf",
				"fdbuf_mutex.h	(fdbuf_mutex.c)"
			],
			[
				"n",
				"nready"
			],
			[
				"buf",
				"buf_mutex"
			],
			[
				"Pth",
				"Pthread_mutex_unlock"
			]
		]
	},
	"buffers":
	[
		{
			"file": "net/TimerId.h",
			"settings":
			{
				"buffer_size": 527,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Channel.h",
			"settings":
			{
				"buffer_size": 2070,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Poller.h",
			"settings":
			{
				"buffer_size": 1285,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Timer.cc",
			"settings":
			{
				"buffer_size": 229,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/TimerQueue.cc",
			"settings":
			{
				"buffer_size": 5993,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/EventLoopThread.cc",
			"settings":
			{
				"buffer_size": 779,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/EventLoopThread.h",
			"settings":
			{
				"buffer_size": 566,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test06.cc",
			"settings":
			{
				"buffer_size": 552,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/EventLoopThreadPool.cc",
			"settings":
			{
				"buffer_size": 1081,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/EventLoopThreadPool.h",
			"settings":
			{
				"buffer_size": 845,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n#ifndef MUDUO_NET_CONNECTOR_H\n#define MUDUO_NET_CONNECTOR_H\n\n#include <muduo/net/InetAddress.h>\n#include <muduo/net/TimerId.h>\n\n#include <memory>\n#include <functional>\n#include <muduo/base/noncopyable.h>\n\nnamespace muduo\n{\nnamespace net {\n\nclass Channel;\nclass EventLoop;\n\nclass Connector : noncopyable\n{\n public:\n  typedef std::function<void (int sockfd)> NewConnectionCallback;\n\n  Connector(EventLoop* loop, const InetAddress& serverAddr);\n  ~Connector();\n\n  void setNewConnectionCallback(const NewConnectionCallback& cb)\n  { newConnectionCallback_ = cb; }\n\n  void start();  // can be called in any thread\n  void restart();  // must be called in loop thread\n  void stop();  // can be called in any thread\n\n  const InetAddress& serverAddress() const { return serverAddr_; }\n\n private:\n  enum States { kDisconnected, kConnecting, kConnected };\n  static const int kMaxRetryDelayMs = 30*1000;\n  static const int kInitRetryDelayMs = 500;\n\n  void setState(States s) { state_ = s; }\n  void startInLoop();\n  void connect();\n  void connecting(int sockfd);\n  void handleWrite();\n  void handleError();\n  void retry(int sockfd);\n  int removeAndResetChannel();\n  void resetChannel();\n\n  EventLoop* loop_;\n  InetAddress serverAddr_;\n  bool connect_; // atomic\n  States state_;  // FIXME: use atomic variable\n  std::unique_ptr<Channel> channel_;\n  NewConnectionCallback newConnectionCallback_;\n  int retryDelayMs_;\n  TimerId timerId_;\n};\ntypedef std::shared_ptr<Connector> ConnectorPtr;\n\n\n} // net\n}\n\n#endif  // MUDUO_NET_CONNECTOR_H\n",
			"file": "net/Connector.h",
			"file_size": 1522,
			"file_write_time": 131139118642979882,
			"settings":
			{
				"buffer_size": 1522,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n#include <muduo/net/Connector.h>\n\n#include <muduo/net/Channel.h>\n#include <muduo/net/EventLoop.h>\n#include <muduo/net/SocketsOps.h>\n\n#include <muduo/base/Logging.h>\n\n#include <errno.h>\n\nusing namespace muduo;\nusing namespace muduo::net;\n\nconst int Connector::kMaxRetryDelayMs;\n\nConnector::Connector(EventLoop* loop, const InetAddress& serverAddr)\n  : loop_(loop),\n    serverAddr_(serverAddr),\n    connect_(false),\n    state_(kDisconnected),\n    retryDelayMs_(kInitRetryDelayMs)\n{\n  LOG_DEBUG << \"ctor[\" << this << \"]\";\n}\n\nConnector::~Connector()\n{\n  LOG_DEBUG << \"dtor[\" << this << \"]\";\n  loop_->cancel(timerId_);\n  assert(!channel_);\n}\n\nvoid Connector::start()\n{\n  connect_ = true;\n  loop_->runInLoop(std::bind(&Connector::startInLoop, this)); // FIXME: unsafe\n}\n\nvoid Connector::startInLoop()\n{\n  loop_->assertInLoopThread();\n  assert(state_ == kDisconnected);\n  if (connect_)\n  {\n    connect();\n  }\n  else\n  {\n    LOG_DEBUG << \"do not connect\";\n  }\n}\n\nvoid Connector::connect()\n{\n  int sockfd = sockets::createNonblockingOrDie();\n  int ret = sockets::connect(sockfd, serverAddr_.getSockAddrInet());\n  int savedErrno = (ret == 0) ? 0 : errno;\n  switch (savedErrno)\n  {\n    case 0:\n    case EINPROGRESS:\n    case EINTR:\n    case EISCONN:\n      connecting(sockfd);\n      break;\n\n    case EAGAIN:\n    case EADDRINUSE:\n    case EADDRNOTAVAIL:\n    case ECONNREFUSED:\n    case ENETUNREACH:\n      retry(sockfd);\n      break;\n\n    case EACCES:\n    case EPERM:\n    case EAFNOSUPPORT:\n    case EALREADY:\n    case EBADF:\n    case EFAULT:\n    case ENOTSOCK:\n      LOG_SYSERR << \"connect error in Connector::startInLoop \" << savedErrno;\n      sockets::close(sockfd);\n      break;\n\n    default:\n      LOG_SYSERR << \"Unexpected error in Connector::startInLoop \" << savedErrno;\n      sockets::close(sockfd);\n      // connectErrorCallback_();\n      break;\n  }\n}\n\nvoid Connector::restart()\n{\n  loop_->assertInLoopThread();\n  setState(kDisconnected);\n  retryDelayMs_ = kInitRetryDelayMs;\n  connect_ = true;\n  startInLoop();\n}\n\nvoid Connector::stop()\n{\n  connect_ = false;\n  loop_->cancel(timerId_);\n}\n\nvoid Connector::connecting(int sockfd)\n{\n  setState(kConnecting);\n  assert(!channel_);\n  channel_.reset(new Channel(loop_, sockfd));\n  channel_->setWriteCallback(\n      std::bind(&Connector::handleWrite, this)); // FIXME: unsafe\n  channel_->setErrorCallback(\n      std::bind(&Connector::handleError, this)); // FIXME: unsafe\n\n  // channel_->tie(shared_from_this()); is not working,\n  // as channel_ is not managed by shared_ptr\n  channel_->enableWriting();\n}\n\nint Connector::removeAndResetChannel()\n{\n  channel_->disableAll();\n  loop_->removeChannel(channel_.get());\n  int sockfd = channel_->fd();\n  // Can't reset channel_ here, because we are inside Channel::handleEvent\n  loop_->queueInLoop(std::bind(&Connector::resetChannel, this)); // FIXME: unsafe\n  return sockfd;\n}\n\nvoid Connector::resetChannel()\n{\n  channel_.reset();\n}\n\nvoid Connector::handleWrite()\n{\n  LOG_TRACE << \"Connector::handleWrite \" << state_;\n\n  if (state_ == kConnecting)\n  {\n    int sockfd = removeAndResetChannel();\n    int err = sockets::getSocketError(sockfd);\n    if (err)\n    {\n      LOG_WARN << \"Connector::handleWrite - SO_ERROR = \"\n               << err << \" \" << strerror_tl(err);\n      retry(sockfd);\n    }\n    else if (sockets::isSelfConnect(sockfd))\n    {\n      LOG_WARN << \"Connector::handleWrite - Self connect\";\n      retry(sockfd);\n    }\n    else\n    {\n      setState(kConnected);\n      if (connect_)\n      {\n        newConnectionCallback_(sockfd);\n      }\n      else\n      {\n        sockets::close(sockfd);\n      }\n    }\n  }\n  else\n  {\n    // what happened?\n    assert(state_ == kDisconnected);\n  }\n}\n\nvoid Connector::handleError()\n{\n  LOG_ERROR << \"Connector::handleError\";\n  assert(state_ == kConnecting);\n\n  int sockfd = removeAndResetChannel();\n  int err = sockets::getSocketError(sockfd);\n  LOG_TRACE << \"SO_ERROR = \" << err << \" \" << strerror_tl(err);\n  retry(sockfd);\n}\n\nvoid Connector::retry(int sockfd)\n{\n  sockets::close(sockfd);\n  setState(kDisconnected);\n  if (connect_)\n  {\n    LOG_INFO << \"Connector::retry - Retry connecting to \"\n             << serverAddr_.toHostPort() << \" in \"\n             << retryDelayMs_ << \" milliseconds. \";\n    timerId_ = loop_->runAfter(retryDelayMs_/1000.0,  // FIXME: unsafe\n                               std::bind(&Connector::startInLoop, this));\n    retryDelayMs_ = std::min(retryDelayMs_ * 2, kMaxRetryDelayMs);\n  }\n  else\n  {\n    LOG_DEBUG << \"do not connect\";\n  }\n}\n\n",
			"file": "net/Connector.cc",
			"file_size": 4494,
			"file_write_time": 131139116294377877,
			"settings":
			{
				"buffer_size": 4494,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Timer.h",
			"settings":
			{
				"buffer_size": 790,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test03.cc",
			"settings":
			{
				"buffer_size": 775,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/TimerQueue.h",
			"settings":
			{
				"buffer_size": 1468,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test04.cc",
			"settings":
			{
				"buffer_size": 967,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n#include <muduo/base/Logging.h>\n#include <muduo/base/Timestamp.h>\n#include <muduo/net/Channel.h>\n#include <muduo/net/EventLoop.h>\n#include <muduo/net/Poller.h>\n#include <muduo/net/TimerQueue.h>\n#include <sys/eventfd.h>\n\n#include <assert.h>\n#include <poll.h>\n#include <signal.h>\n\nusing namespace muduo;\nusing namespace muduo::net;\n\n// gcc  local thread store\n__thread EventLoop* t_loopInThisThread = 0;\nconst int kPollTimeMs = 10000;\n\nstatic int createEventfd() {\n  int evtfd = ::eventfd(0, EFD_NONBLOCK | EFD_CLOEXEC);\n  if (evtfd < 0) {\n    LOG_SYSERR << \"Failed in eventfd\";\n    abort();\n  }\n  return evtfd;\n}\n\nclass IgnoreSigPipe {\n public:\n  IgnoreSigPipe() { ::signal(SIGPIPE, SIG_IGN); }\n};\n\nIgnoreSigPipe initObj;\n\nEventLoop::EventLoop()\n    : looping_(false),\n      quit_(false),\n      callingPendingFunctors_(false),\n      threadId_(CurrentThread::tid()),\n      wakeupFd_(createEventfd()),\n      poller_(new Poller(this)),\n      timerQueue_(new TimerQueue(this)),\n      wakeupChannel_(new Channel(this, wakeupFd_)) {\n  LOG_TRACE << \"EventLoop created \" << this << \" in thread \" << threadId_;\n  if (t_loopInThisThread) {\n    LOG_FATAL << \"Another EventLoop \" << t_loopInThisThread\n              << \" exists in this thread \" << threadId_;\n  } else {\n    t_loopInThisThread = this;\n  }\n\n  // toregister wakeupChannel\n  wakeupChannel_->setReadCallback(std::bind(&EventLoop::handleRead, this));\n  wakeupChannel_->enableReading();\n}\n\nEventLoop::~EventLoop() {\n  assert(!looping_);\n  t_loopInThisThread = NULL;\n}\n\nEventLoop* EventLoop::getEventLoopOfCurrentThread() {\n  return t_loopInThisThread;\n}\n\nvoid EventLoop::loop() {\n  assert(!looping_);\n  assertInLoopThread();\n  looping_ = true;\n  quit_ = false;\n\n  while (!quit_) {\n    activeChannels_.clear();\n    pollReturnTime_ = poller_->poll(kPollTimeMs, &activeChannels_);\n    for (ChannelList::iterator it = activeChannels_.begin();\n         it != activeChannels_.end(); ++it) {\n      (*it)->handleEvent(pollReturnTime_);\n    }\n    doPendingFunctors();\n  }\n\n  LOG_TRACE << \"EventLoop \" << this << \" stop looping\";\n  looping_ = false;\n}\n\nvoid EventLoop::quit() {\n  quit_ = true;\n  if (!isInLoopThread()) {\n    wakeup();\n  }\n}\n\nvoid EventLoop::runInLoop(Functor&& cb) {\n  if (isInLoopThread()) {\n    cb();\n  } else {\n    queueInLoop(std::move(cb));\n  }\n}\n\nvoid EventLoop::queueInLoop(Functor&& cb) {\n  {\n    MutexLockGuard lock(mutex_);\n    pendingFunctors_.push_back(cb);\n  }\n\n  if (!isInLoopThread() || callingPendingFunctors_) {\n    wakeup();\n  }\n}\n\nTimerId EventLoop::runAt(const Timestamp& time, const TimerCallback&& cb) {\n  return timerQueue_->addTimer(std::move(cb), time, 0.0);\n}\n\nTimerId EventLoop::runAfter(double delay, const TimerCallback&& cb) {\n  Timestamp time(addTime(Timestamp::now(), delay));\n  return runAt(time, std::move(cb));\n}\n\nTimerId EventLoop::runEvery(double interval, const TimerCallback&& cb) {\n  Timestamp time(addTime(Timestamp::now(), interval));\n  return timerQueue_->addTimer(std::move(cb), time, interval);\n}\n\n// void EventLoop::cancel(TimerId timerId)\n// {\n//   return timerQueue_->cancel(timerId);\n// }\n\nvoid EventLoop::updateChannel(Channel* channel) {\n  assert(channel->ownerLoop() == this);\n  assertInLoopThread();\n  poller_->updateChannel(channel);\n}\nvoid EventLoop::removeChannel(Channel* channel) {\n  assert(channel->ownerLoop() == this);\n  assertInLoopThread();\n  poller_->removeChannel(channel);\n}\n\nvoid EventLoop::abortNotInLoopThread() {\n  LOG_FATAL << \"EventLoop::abortNotInLoopThread - EventLoop \" << this\n            << \" was created in threadId_ = \" << threadId_\n            << \", current thread id = \" << CurrentThread::tid();\n}\n\nvoid EventLoop::wakeup() {\n  uint64_t one = 1;\n  ssize_t n = ::write(wakeupFd_, &one, sizeof one);\n  if (n != sizeof one) {\n    LOG_ERROR << \"EventLoop::wakeup() writes \" << n << \" bytes instead of 8\";\n  }\n}\n\nvoid EventLoop::handleRead() {\n  uint64_t one = 1;\n  ssize_t n = ::read(wakeupFd_, &one, sizeof one);\n  if (n != sizeof one) {\n    LOG_ERROR << \"EventLoop::handleRead() reads \" << n << \" bytes instead of 8\";\n  }\n}\n\nvoid EventLoop::doPendingFunctors() {\n  std::vector<Functor> functors;\n  callingPendingFunctors_ = true;\n\n  {\n    // reduce the lenth of the critical section\n    // avoid the dead lock cause the functor can call queueInloop(;)\n    MutexLockGuard lock(mutex_);\n    functors.swap(pendingFunctors_);\n  }\n\n  for (size_t i = 0; i < functors.size(); ++i) {\n    functors[i]();\n  }\n  callingPendingFunctors_ = false;\n}\n",
			"file": "net/EventLoop.cc",
			"file_size": 4506,
			"file_write_time": 131140623384612795,
			"settings":
			{
				"buffer_size": 4470,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Channel.cc",
			"settings":
			{
				"buffer_size": 1576,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Acceptor.h",
			"settings":
			{
				"buffer_size": 934,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Socket.cc",
			"settings":
			{
				"buffer_size": 1524,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Acceptor.cc",
			"settings":
			{
				"buffer_size": 1243,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/HttpServer.h",
			"settings":
			{
				"buffer_size": 1207,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/HttpServer.cc",
			"settings":
			{
				"buffer_size": 2126,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/HttpResponse.cc",
			"settings":
			{
				"buffer_size": 1139,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/HttpResponse.h",
			"settings":
			{
				"buffer_size": 1333,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/HttpRequest.h",
			"settings":
			{
				"buffer_size": 3209,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/Makefile",
			"settings":
			{
				"buffer_size": 174,
				"line_ending": "Unix"
			}
		},
		{
			"file": "base/Singleton.h",
			"settings":
			{
				"buffer_size": 1531,
				"line_ending": "Unix"
			}
		},
		{
			"file": "base/Thread.h",
			"settings":
			{
				"buffer_size": 1222,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/HttpContext.cc",
			"settings":
			{
				"buffer_size": 2354,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/HttpContext.h",
			"settings":
			{
				"buffer_size": 1008,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test07",
			"settings":
			{
				"buffer_size": 10508600,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/TcpServer.cc",
			"settings":
			{
				"buffer_size": 2910,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Callbacks.h",
			"settings":
			{
				"buffer_size": 693,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/TcpConnection.h",
			"settings":
			{
				"buffer_size": 3339,
				"line_ending": "Unix"
			}
		},
		{
			"file": "base/Makefile",
			"settings":
			{
				"buffer_size": 194,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Makefile",
			"settings":
			{
				"buffer_size": 193,
				"line_ending": "Unix"
			}
		},
		{
			"file": "base/Types.h",
			"settings":
			{
				"buffer_size": 4861,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/TcpConnection.cc",
			"settings":
			{
				"buffer_size": 6575,
				"line_ending": "Unix"
			}
		},
		{
			"file": "base/StringPiece.h",
			"settings":
			{
				"buffer_size": 6886,
				"line_ending": "Unix"
			}
		},
		{
			"file": "base/Mutex.h",
			"settings":
			{
				"buffer_size": 3025,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/Makefile",
			"settings":
			{
				"buffer_size": 438,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/tests/Makefile",
			"settings":
			{
				"buffer_size": 505,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <muduo/http/HttpServer.h>\n#include <muduo/http/HttpRequest.h>\n#include <muduo/http/HttpResponse.h>\n#include <muduo/net/EventLoop.h>\n#include <muduo/base/Logging.h>\n\n#include <iostream>\n#include <map>\n\nusing namespace muduo;\nusing namespace muduo::net;\n\nextern char favicon[555];\nbool benchmark = false;\n\nvoid onRequest(const HttpRequest& req, HttpResponse* resp)\n{\n  std::cout << \"Headers \" << req.methodString() << \" \" << req.path() << std::endl;\n  if (!benchmark)\n  {\n    const std::map<std::string, std::string>& headers = req.headers();\n    for (std::map<std::string, std::string>::const_iterator it = headers.begin();\n         it != headers.end();\n         ++it)\n    {\n      std::cout << it->first << \": \" << it->second << std::endl;\n    }\n  }\n\n  if (req.path() == \"/\")\n  {\n    resp->setStatusCode(HttpResponse::k200Ok);\n    resp->setStatusMessage(\"OK\");\n    resp->setContentType(\"text/html\");\n    resp->addHeader(\"Server\", \"Muduo\");\n    std::string now = Timestamp::now().toFormattedString();\n    resp->setBody(\"<html><head><title>This is title</title></head>\"\n        \"<body><h1>Hello</h1>Now is \" + now +\n        \"</body></html>\");\n  }\n  else if (req.path() == \"/favicon.ico\")\n  {\n    resp->setStatusCode(HttpResponse::k200Ok);\n    resp->setStatusMessage(\"OK\");\n    resp->setContentType(\"image/png\");\n    resp->setBody(std::string(favicon, sizeof favicon));\n  }\n  else if (req.path() == \"/hello\")\n  {\n    resp->setStatusCode(HttpResponse::k200Ok);\n    resp->setStatusMessage(\"OK\");\n    resp->setContentType(\"text/plain\");\n    resp->addHeader(\"Server\", \"Muduo\");\n    resp->setBody(\"hello, world!\\n\");\n  }\n  else\n  {\n    resp->setStatusCode(HttpResponse::k404NotFound);\n    resp->setStatusMessage(\"Not Found\");\n    resp->setCloseConnection(true);\n  }\n}\n\nint main(int argc, char* argv[])\n{\n  int numThreads = 0;\n  if (argc > 1)\n  {\n    benchmark = true;\n    Logger::setLogLevel(Logger::WARN);\n    numThreads = atoi(argv[1]);\n  }\n  EventLoop loop;\n  HttpServer server(&loop, InetAddress(8000), \"dummy\");\n  server.setHttpCallback(onRequest);\n  server.setThreadNum(numThreads);\n  server.start();\n  loop.loop();\n}\n\nchar favicon[555] = {\n  '\\x89', 'P', 'N', 'G', '\\xD', '\\xA', '\\x1A', '\\xA',\n  '\\x0', '\\x0', '\\x0', '\\xD', 'I', 'H', 'D', 'R',\n  '\\x0', '\\x0', '\\x0', '\\x10', '\\x0', '\\x0', '\\x0', '\\x10',\n  '\\x8', '\\x6', '\\x0', '\\x0', '\\x0', '\\x1F', '\\xF3', '\\xFF',\n  'a', '\\x0', '\\x0', '\\x0', '\\x19', 't', 'E', 'X',\n  't', 'S', 'o', 'f', 't', 'w', 'a', 'r',\n  'e', '\\x0', 'A', 'd', 'o', 'b', 'e', '\\x20',\n  'I', 'm', 'a', 'g', 'e', 'R', 'e', 'a',\n  'd', 'y', 'q', '\\xC9', 'e', '\\x3C', '\\x0', '\\x0',\n  '\\x1', '\\xCD', 'I', 'D', 'A', 'T', 'x', '\\xDA',\n  '\\x94', '\\x93', '9', 'H', '\\x3', 'A', '\\x14', '\\x86',\n  '\\xFF', '\\x5D', 'b', '\\xA7', '\\x4', 'R', '\\xC4', 'm',\n  '\\x22', '\\x1E', '\\xA0', 'F', '\\x24', '\\x8', '\\x16', '\\x16',\n  'v', '\\xA', '6', '\\xBA', 'J', '\\x9A', '\\x80', '\\x8',\n  'A', '\\xB4', 'q', '\\x85', 'X', '\\x89', 'G', '\\xB0',\n  'I', '\\xA9', 'Q', '\\x24', '\\xCD', '\\xA6', '\\x8', '\\xA4',\n  'H', 'c', '\\x91', 'B', '\\xB', '\\xAF', 'V', '\\xC1',\n  'F', '\\xB4', '\\x15', '\\xCF', '\\x22', 'X', '\\x98', '\\xB',\n  'T', 'H', '\\x8A', 'd', '\\x93', '\\x8D', '\\xFB', 'F',\n  'g', '\\xC9', '\\x1A', '\\x14', '\\x7D', '\\xF0', 'f', 'v',\n  'f', '\\xDF', '\\x7C', '\\xEF', '\\xE7', 'g', 'F', '\\xA8',\n  '\\xD5', 'j', 'H', '\\x24', '\\x12', '\\x2A', '\\x0', '\\x5',\n  '\\xBF', 'G', '\\xD4', '\\xEF', '\\xF7', '\\x2F', '6', '\\xEC',\n  '\\x12', '\\x20', '\\x1E', '\\x8F', '\\xD7', '\\xAA', '\\xD5', '\\xEA',\n  '\\xAF', 'I', '5', 'F', '\\xAA', 'T', '\\x5F', '\\x9F',\n  '\\x22', 'A', '\\x2A', '\\x95', '\\xA', '\\x83', '\\xE5', 'r',\n  '9', 'd', '\\xB3', 'Y', '\\x96', '\\x99', 'L', '\\x6',\n  '\\xE9', 't', '\\x9A', '\\x25', '\\x85', '\\x2C', '\\xCB', 'T',\n  '\\xA7', '\\xC4', 'b', '1', '\\xB5', '\\x5E', '\\x0', '\\x3',\n  'h', '\\x9A', '\\xC6', '\\x16', '\\x82', '\\x20', 'X', 'R',\n  '\\x14', 'E', '6', 'S', '\\x94', '\\xCB', 'e', 'x',\n  '\\xBD', '\\x5E', '\\xAA', 'U', 'T', '\\x23', 'L', '\\xC0',\n  '\\xE0', '\\xE2', '\\xC1', '\\x8F', '\\x0', '\\x9E', '\\xBC', '\\x9',\n  'A', '\\x7C', '\\x3E', '\\x1F', '\\x83', 'D', '\\x22', '\\x11',\n  '\\xD5', 'T', '\\x40', '\\x3F', '8', '\\x80', 'w', '\\xE5',\n  '3', '\\x7', '\\xB8', '\\x5C', '\\x2E', 'H', '\\x92', '\\x4',\n  '\\x87', '\\xC3', '\\x81', '\\x40', '\\x20', '\\x40', 'g', '\\x98',\n  '\\xE9', '6', '\\x1A', '\\xA6', 'g', '\\x15', '\\x4', '\\xE3',\n  '\\xD7', '\\xC8', '\\xBD', '\\x15', '\\xE1', 'i', '\\xB7', 'C',\n  '\\xAB', '\\xEA', 'x', '\\x2F', 'j', 'X', '\\x92', '\\xBB',\n  '\\x18', '\\x20', '\\x9F', '\\xCF', '3', '\\xC3', '\\xB8', '\\xE9',\n  'N', '\\xA7', '\\xD3', 'l', 'J', '\\x0', 'i', '6',\n  '\\x7C', '\\x8E', '\\xE1', '\\xFE', 'V', '\\x84', '\\xE7', '\\x3C',\n  '\\x9F', 'r', '\\x2B', '\\x3A', 'B', '\\x7B', '7', 'f',\n  'w', '\\xAE', '\\x8E', '\\xE', '\\xF3', '\\xBD', 'R', '\\xA9',\n  'd', '\\x2', 'B', '\\xAF', '\\x85', '2', 'f', 'F',\n  '\\xBA', '\\xC', '\\xD9', '\\x9F', '\\x1D', '\\x9A', 'l', '\\x22',\n  '\\xE6', '\\xC7', '\\x3A', '\\x2C', '\\x80', '\\xEF', '\\xC1', '\\x15',\n  '\\x90', '\\x7', '\\x93', '\\xA2', '\\x28', '\\xA0', 'S', 'j',\n  '\\xB1', '\\xB8', '\\xDF', '\\x29', '5', 'C', '\\xE', '\\x3F',\n  'X', '\\xFC', '\\x98', '\\xDA', 'y', 'j', 'P', '\\x40',\n  '\\x0', '\\x87', '\\xAE', '\\x1B', '\\x17', 'B', '\\xB4', '\\x3A',\n  '\\x3F', '\\xBE', 'y', '\\xC7', '\\xA', '\\x26', '\\xB6', '\\xEE',\n  '\\xD9', '\\x9A', '\\x60', '\\x14', '\\x93', '\\xDB', '\\x8F', '\\xD',\n  '\\xA', '\\x2E', '\\xE9', '\\x23', '\\x95', '\\x29', 'X', '\\x0',\n  '\\x27', '\\xEB', 'n', 'V', 'p', '\\xBC', '\\xD6', '\\xCB',\n  '\\xD6', 'G', '\\xAB', '\\x3D', 'l', '\\x7D', '\\xB8', '\\xD2',\n  '\\xDD', '\\xA0', '\\x60', '\\x83', '\\xBA', '\\xEF', '\\x5F', '\\xA4',\n  '\\xEA', '\\xCC', '\\x2', 'N', '\\xAE', '\\x5E', 'p', '\\x1A',\n  '\\xEC', '\\xB3', '\\x40', '9', '\\xAC', '\\xFE', '\\xF2', '\\x91',\n  '\\x89', 'g', '\\x91', '\\x85', '\\x21', '\\xA8', '\\x87', '\\xB7',\n  'X', '\\x7E', '\\x7E', '\\x85', '\\xBB', '\\xCD', 'N', 'N',\n  'b', 't', '\\x40', '\\xFA', '\\x93', '\\x89', '\\xEC', '\\x1E',\n  '\\xEC', '\\x86', '\\x2', 'H', '\\x26', '\\x93', '\\xD0', 'u',\n  '\\x1D', '\\x7F', '\\x9', '2', '\\x95', '\\xBF', '\\x1F', '\\xDB',\n  '\\xD7', 'c', '\\x8A', '\\x1A', '\\xF7', '\\x5C', '\\xC1', '\\xFF',\n  '\\x22', 'J', '\\xC3', '\\x87', '\\x0', '\\x3', '\\x0', 'K',\n  '\\xBB', '\\xF8', '\\xD6', '\\x2A', 'v', '\\x98', 'I', '\\x0',\n  '\\x0', '\\x0', '\\x0', 'I', 'E', 'N', 'D', '\\xAE',\n  'B', '\\x60', '\\x82',\n};\n",
			"file": "http/tests/HttpServer_test.cc",
			"file_size": 6110,
			"file_write_time": 131141609422349953,
			"settings":
			{
				"buffer_size": 6140,
				"line_ending": "Unix"
			}
		},
		{
			"file": "http/tests/HttpRequest_unittest.cc",
			"settings":
			{
				"buffer_size": 2952,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test9.cc",
			"settings":
			{
				"buffer_size": 1232,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test10.cc",
			"settings":
			{
				"buffer_size": 1688,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test11.cc",
			"settings":
			{
				"buffer_size": 1601,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Buffer.h",
			"settings":
			{
				"buffer_size": 8857,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Buffer.cc",
			"settings":
			{
				"buffer_size": 1156,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n#ifndef MUDUO_NET_ENDIAN_H\n#define MUDUO_NET_ENDIAN_H\n\n#include <stdint.h>\n#include <endian.h>\n\nnamespace muduo\n{\nnamespace net\n{\nnamespace sockets\n{\n\n// the inline assembler code makes type blur,\n// so we disable warnings for a while.\n#if defined(__clang__) || __GNUC_PREREQ (4,6)\n#pragma GCC diagnostic push\n#endif\n#pragma GCC diagnostic ignored \"-Wconversion\"\n#pragma GCC diagnostic ignored \"-Wold-style-cast\"\ninline uint64_t hostToNetwork64(uint64_t host64)\n{\n  return htobe64(host64);\n}\n\ninline uint32_t hostToNetwork32(uint32_t host32)\n{\n  return htobe32(host32);\n}\n\ninline uint16_t hostToNetwork16(uint16_t host16)\n{\n  return htobe16(host16);\n}\n\ninline uint64_t networkToHost64(uint64_t net64)\n{\n  return be64toh(net64);\n}\n\ninline uint32_t networkToHost32(uint32_t net32)\n{\n  return be32toh(net32);\n}\n\ninline uint16_t networkToHost16(uint16_t net16)\n{\n  return be16toh(net16);\n}\n#if defined(__clang__) || __GNUC_PREREQ (4,6)\n#pragma GCC diagnostic pop\n#else\n#pragma GCC diagnostic warning \"-Wconversion\"\n#pragma GCC diagnostic warning \"-Wold-style-cast\"\n#endif\n\n\n}\n}\n}\n\n#endif  // MUDUO_NET_ENDIAN_H\n",
			"file": "net/Endian.h",
			"file_size": 1108,
			"file_write_time": 131140977806857254,
			"settings":
			{
				"buffer_size": 1108,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n#ifndef MUDUO_NET_INETADDRESS_H\n#define MUDUO_NET_INETADDRESS_H\n\n#include <muduo/base/copyable.h>\n\n#include <string>\n\n#include <netinet/in.h>\n\nnamespace muduo\n{\nnamespace net {\n\n\n\n///\n/// Wrapper of sockaddr_in.\n///\n/// This is an POD interface class.\nclass InetAddress : copyable\n{\n public:\n  /// Constructs an endpoint with given port number.\n  /// Mostly used in TcpServer listening.\n  explicit InetAddress(uint16_t port);\n\n  /// Constructs an endpoint with given ip and port.\n  /// @c ip should be \"1.2.3.4\"\n  InetAddress(const std::string& ip, uint16_t port);\n\n  /// Constructs an endpoint with given struct @c sockaddr_in\n  /// Mostly used when accepting new connections\n  InetAddress(const struct sockaddr_in& addr)\n    : addr_(addr)\n  { }\n\n  std::string toIp() const;\n  std::string toIpPort() const;\n\n  std::string toHostPort() const;\n\n  // default copy/assignment are Okay\n\n  const struct sockaddr_in& getSockAddrInet() const { return addr_; }\n  void setSockAddrInet(const struct sockaddr_in& addr) { addr_ = addr; }\n\n private:\n  struct sockaddr_in addr_;\n};\n\n\n} // net\n\n}\n\n#endif  // MUDUO_NET_INETADDRESS_H\n",
			"file": "net/InetAddress.h",
			"file_size": 1121,
			"file_write_time": 131140852216986265,
			"settings":
			{
				"buffer_size": 1119,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/InetAddress.cc",
			"settings":
			{
				"buffer_size": 1703,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/SocketsOps.h",
			"settings":
			{
				"buffer_size": 1532,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/TcpServer.h",
			"settings":
			{
				"buffer_size": 2581,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Socket.h",
			"settings":
			{
				"buffer_size": 1268,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test07.cc",
			"settings":
			{
				"buffer_size": 1308,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/SocketsOps.cc",
			"settings":
			{
				"buffer_size": 5129,
				"line_ending": "Unix"
			}
		},
		{
			"file": "base/Logging.h",
			"settings":
			{
				"buffer_size": 3550,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/Poller.cc",
			"settings":
			{
				"buffer_size": 3361,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/EventLoop.h",
			"settings":
			{
				"buffer_size": 2756,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test05.cc",
			"settings":
			{
				"buffer_size": 870,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test08.cc",
			"settings":
			{
				"buffer_size": 1343,
				"line_ending": "Unix"
			}
		},
		{
			"file": "net/test/test08",
			"settings":
			{
				"buffer_size": 10621840,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 116.0,
		"last_filter": "Package Control: remove",
		"selected_items":
		[
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: Remove Channel"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control: remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: up",
				"Package Control: Upgrade Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: li",
				"Package Control: List Packages"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"clang",
				"Package Control: Install Package"
			]
		],
		"width": 557.0
	},
	"console":
	{
		"height": 195.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/http",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/http/tests",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net"
	],
	"file_history":
	[
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Tcpconn2.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Tcpconn2.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/test06.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/CurrentThread.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/Thread.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/Condition.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/ThreadPool.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/test/test04",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Channel.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/Logging.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Acceptor.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/SocketsOps.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Socket.h",
		"/home/xibaohe/.config/sublime-text-3/Packages/User/EasyClangComplete.sublime-settings",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/Date.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Timer.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/TimerQueue.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/TimerQueue.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/Timestamp.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Timer.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/test/test_EventLoop.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/test/test03.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/EventLoop.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Channel.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/EventLoop.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Poller.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Callbacks.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Poller.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/test/Makefile",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/test/test_EventLoop",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Makefile",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/noncopyable.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/noncopyable.h",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/net/Eventloop.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/tests/Makefile",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/Makefile",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/tests/Logging_test.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/LogFile.cc",
		"/home/xibaohe/ServerCode/chenshuo/muduo_11/muduo/base/common.mk",
		"/home/xibaohe/ServerCode/testc++/test.cpp",
		"/home/xibaohe/ServerCode/Tiny/README.md",
		"/home/xibaohe/ServerCode/Tiny/common/csapp.c",
		"/home/xibaohe/ServerCode/Tiny/Tiny_process/sbuf.h",
		"/home/xibaohe/ServerCode/Tiny/Tiny_process/src/do_task.c",
		"/home/xibaohe/ServerCode/Tiny/common/csapp.h",
		"/home/xibaohe/ServerCode/Tiny/Tiny_process/tiny_select",
		"/home/xibaohe/.config/sublime-text-3/Packages/C++ Snippets/README.md",
		"/home/xibaohe/.config/sublime-text-3/Packages/SublimeLinter/Default (Linux).sublime-keymap",
		"/home/xibaohe/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/xibaohe/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/xibaohe/.config/sublime-text-3/Packages/Clang Format/Default (Linux).sublime-keymap",
		"/home/xibaohe/.config/sublime-text-3/Packages/Clang Format/clang_format.sublime-settings",
		"/home/xibaohe/.config/sublime-text-3/Packages/User/clang_format_custom.sublime-settings",
		"/home/xibaohe/csapp/Tiny/.clang_complete",
		"/home/xibaohe/csapp/Tiny/common/);",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/do_task.c",
		"/home/xibaohe/csapp/Tiny/common/csapp.h",
		"/home/xibaohe/csapp/Tiny/common/csapp.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/do_task_nonblock.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/include/do_task.h",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_poll.c",
		"/home/xibaohe/csapp/Tiny/test_client/epoll_sample.c",
		"/home/xibaohe/.config/sublime-text-3/Packages/Terminal/Default (Linux).sublime-keymap",
		"/home/xibaohe/.config/sublime-text-3/Packages/Terminal/Terminal.sublime-settings",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_thread_pre2.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_epoll_nonblock.c",
		"/home/xibaohe/.config/sublime-text-3/Packages/CTags/Default.sublime-keymap",
		"/home/xibaohe/csapp/Tiny/Tiny_process/tiny_poll",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_select.c",
		"/home/xibaohe/csapp/Tiny/test_client/test_client.c",
		"/home/xibaohe/.config/sublime-text-3/Packages/User/CTags.sublime-settings",
		"/home/xibaohe/.config/sublime-text-3/Packages/CTags/CTags.sublime-settings",
		"/home/xibaohe/.config/sublime-text-3/Packages/EasyClangComplete/EasyClangComplete.sublime-settings",
		"/home/xibaohe/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/fdbuf.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_thread_pre.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/include/fdbuf.h",
		"/home/xibaohe/csapp/Tiny/Tiny_process/sbuf.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_thread_pre_mutex.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/fdbuf_mutex.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_thread.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/include/fdbuf_mutex.h",
		"/home/xibaohe/csapp/Tiny/Tiny_process/echoservert.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/echoservert_pre.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/sbuf.h",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_thread_dy.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_thread_dy",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_process_pre.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_process.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny_iter.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/echoservers.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/Makefile",
		"/home/xibaohe/csapp/Tiny/Tiny_process/cgi-bin/adder.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/src/tiny.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/tiny_select.c",
		"/home/xibaohe/csapp/Tiny/Tiny_process/tiny.c",
		"/home/xibaohe/.config/sublime-text-3/Packages/ClangAutoComplete/ClangAutoComplete.sublime-settings",
		"/home/xibaohe/.config/sublime-text-3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/home/xibaohe/csapp/code/netp/tiny/cgi-bin/adder.c",
		"/home/xibaohe/csapp/code/netp/tiny/add.html",
		"/home/xibaohe/csapp/code/netp/tiny/tiny.c",
		"/home/xibaohe/csapp/code/include/csapp.h",
		"/home/xibaohe/csapp/code/src/csapp.c",
		"/home/xibaohe/.config/sublime-text-3/Packages/Clang Format/clang_format_custom.sublime-settings",
		"/home/xibaohe/.config/sublime-text-3/Packages/User/ClangAutoComplete.sublime-settings",
		"/home/xibaohe/.config/sublime-text-3/Packages/C99/messages/install.txt",
		"/home/xibaohe/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"MUDUO_NET_HTTP_HTTPREQUEST_H",
			"string",
			" $(",
			"boost::bind",
			"std::bind",
			"std::string",
			"string",
			" >",
			";\n",
			"boost",
			"LOG_INFO",
			"bind",
			"h",
			"queueInLoop",
			"isInloopThread",
			"wakeupFd_",
			"());\n",
			"loop",
			"boost",
			"typedef",
			"shared_ptr",
			"\n#",
			"Eventloop",
			"()''",
			"MUDUO_CHANNEL_H",
			"MUDUO_EVENT_LOOP_H",
			"muduo",
			"Eventloop",
			"p",
			"allocate_shared",
			"count",
			");\n",
			"__u",
			"swap",
			"pointer()",
			"fd",
			"rio",
			"rb",
			"extern",
			"SYMBOL",
			"open_cli",
			"P",
			"select",
			"}\n",
			"printf",
			"pool",
			"nready",
			"P"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"std::string",
			"std::bind",
			"boost::bind",
			"string",
			"std::string",
			"isInLoopThread",
			"std",
			"EventLoop",
			"client_pool"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 43,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "net/TimerId.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 527,
						"regions":
						{
						},
						"selection":
						[
							[
								467,
								467
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "net/Channel.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2070,
						"regions":
						{
						},
						"selection":
						[
							[
								1740,
								1740
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "net/Poller.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1285,
						"regions":
						{
						},
						"selection":
						[
							[
								1123,
								1123
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 300.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "net/Timer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 229,
						"regions":
						{
						},
						"selection":
						[
							[
								229,
								229
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "net/TimerQueue.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5993,
						"regions":
						{
						},
						"selection":
						[
							[
								2536,
								2536
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1387.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "net/EventLoopThread.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 779,
						"regions":
						{
						},
						"selection":
						[
							[
								387,
								387
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "net/EventLoopThread.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 566,
						"regions":
						{
						},
						"selection":
						[
							[
								401,
								401
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 399.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "net/test/test06.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 552,
						"regions":
						{
						},
						"selection":
						[
							[
								504,
								504
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "net/EventLoopThreadPool.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1081,
						"regions":
						{
						},
						"selection":
						[
							[
								519,
								519
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "net/EventLoopThreadPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 845,
						"regions":
						{
						},
						"selection":
						[
							[
								582,
								582
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 60.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "net/Connector.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1522,
						"regions":
						{
						},
						"selection":
						[
							[
								1421,
								1421
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 387.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "net/Connector.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4494,
						"regions":
						{
						},
						"selection":
						[
							[
								186,
								186
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "net/Timer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 790,
						"regions":
						{
						},
						"selection":
						[
							[
								753,
								753
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "net/test/test03.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 775,
						"regions":
						{
						},
						"selection":
						[
							[
								277,
								277
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "net/TimerQueue.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1468,
						"regions":
						{
						},
						"selection":
						[
							[
								1082,
								1082
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 300.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "net/test/test04.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 967,
						"regions":
						{
						},
						"selection":
						[
							[
								483,
								483
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "net/EventLoop.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4470,
						"regions":
						{
						},
						"selection":
						[
							[
								4055,
								4055
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1945.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "net/Channel.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1576,
						"regions":
						{
						},
						"selection":
						[
							[
								726,
								726
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "net/Acceptor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 934,
						"regions":
						{
						},
						"selection":
						[
							[
								756,
								756
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "net/Socket.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1524,
						"regions":
						{
						},
						"selection":
						[
							[
								792,
								792
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 439.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "net/Acceptor.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1243,
						"regions":
						{
						},
						"selection":
						[
							[
								1242,
								1242
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "http/HttpServer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1207,
						"regions":
						{
						},
						"selection":
						[
							[
								648,
								648
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "http/HttpServer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2126,
						"regions":
						{
						},
						"selection":
						[
							[
								1991,
								1991
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1134.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "http/HttpResponse.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1139,
						"regions":
						{
						},
						"selection":
						[
							[
								267,
								267
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "http/HttpResponse.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1333,
						"regions":
						{
						},
						"selection":
						[
							[
								400,
								400
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 60.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "http/HttpRequest.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3209,
						"regions":
						{
						},
						"selection":
						[
							[
								3014,
								3014
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 600.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "http/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 174,
						"regions":
						{
						},
						"selection":
						[
							[
								174,
								174
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "base/Singleton.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1531,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "base/Thread.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1222,
						"regions":
						{
						},
						"selection":
						[
							[
								504,
								504
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "http/HttpContext.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2354,
						"regions":
						{
						},
						"selection":
						[
							[
								1505,
								1505
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "http/HttpContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1008,
						"regions":
						{
						},
						"selection":
						[
							[
								414,
								414
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "net/test/test07",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10508600,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "net/TcpServer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2910,
						"regions":
						{
						},
						"selection":
						[
							[
								2010,
								2010
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1380.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "net/Callbacks.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 693,
						"regions":
						{
						},
						"selection":
						[
							[
								693,
								693
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "net/TcpConnection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3339,
						"regions":
						{
						},
						"selection":
						[
							[
								944,
								944
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "base/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 194,
						"regions":
						{
						},
						"selection":
						[
							[
								75,
								75
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "net/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 193,
						"regions":
						{
						},
						"selection":
						[
							[
								58,
								58
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "base/Types.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 4861,
						"regions":
						{
						},
						"selection":
						[
							[
								249,
								249
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "net/TcpConnection.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6575,
						"regions":
						{
						},
						"selection":
						[
							[
								938,
								938
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "base/StringPiece.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6886,
						"regions":
						{
						},
						"selection":
						[
							[
								5412,
								5412
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1187.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "base/Mutex.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3025,
						"regions":
						{
						},
						"selection":
						[
							[
								2830,
								2830
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1980.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "net/test/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 438,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								59
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "http/tests/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 505,
						"regions":
						{
						},
						"selection":
						[
							[
								502,
								502
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "http/tests/HttpServer_test.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6140,
						"regions":
						{
						},
						"selection":
						[
							[
								1568,
								1568
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 480.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "http/tests/HttpRequest_unittest.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2952,
						"regions":
						{
						},
						"selection":
						[
							[
								2952,
								2952
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "net/test/test9.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1232,
						"regions":
						{
						},
						"selection":
						[
							[
								875,
								875
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "net/test/test10.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1688,
						"regions":
						{
						},
						"selection":
						[
							[
								1066,
								1066
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "net/test/test11.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1601,
						"regions":
						{
						},
						"selection":
						[
							[
								1281,
								1281
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 480.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "net/Buffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8857,
						"regions":
						{
						},
						"selection":
						[
							[
								3710,
								3710
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "net/Buffer.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1156,
						"regions":
						{
						},
						"selection":
						[
							[
								394,
								394
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "net/Endian.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1108,
						"regions":
						{
						},
						"selection":
						[
							[
								965,
								965
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": -0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "net/InetAddress.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1119,
						"regions":
						{
						},
						"selection":
						[
							[
								1027,
								1027
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 307.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "net/InetAddress.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1703,
						"regions":
						{
						},
						"selection":
						[
							[
								1536,
								1536
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 627.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "net/SocketsOps.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1532,
						"regions":
						{
						},
						"selection":
						[
							[
								932,
								932
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "net/TcpServer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2581,
						"regions":
						{
						},
						"selection":
						[
							[
								663,
								663
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "net/Socket.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1268,
						"regions":
						{
						},
						"selection":
						[
							[
								1192,
								1192
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "net/test/test07.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1308,
						"regions":
						{
						},
						"selection":
						[
							[
								611,
								611
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "net/SocketsOps.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5129,
						"regions":
						{
						},
						"selection":
						[
							[
								3420,
								3420
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2557.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "base/Logging.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3550,
						"regions":
						{
						},
						"selection":
						[
							[
								1538,
								1538
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1067.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "net/Poller.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3361,
						"regions":
						{
						},
						"selection":
						[
							[
								759,
								759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "net/EventLoop.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2756,
						"regions":
						{
						},
						"selection":
						[
							[
								2451,
								2451
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1327.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "net/test/test05.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 870,
						"regions":
						{
						},
						"selection":
						[
							[
								600,
								600
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "net/test/test08.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1343,
						"regions":
						{
						},
						"selection":
						[
							[
								933,
								933
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "net/test/test08",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10621840,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 36.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "muduo_11.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Tiny_process/sbuf.c"
			],
			[
				"tiny_thred",
				"Tiny_process/src/tiny_thread_pre.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 232.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
